<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Python | Snowwwolf's Blog]]></title>
  <link href="http://blog.snowwwolf.com/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://blog.snowwwolf.com/"/>
  <updated>2014-03-05T19:29:22+08:00</updated>
  <id>http://blog.snowwwolf.com/</id>
  <author>
    <name><![CDATA[Snowwwolf]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Python Tips]]></title>
    <link href="http://blog.snowwwolf.com/blog/2014/03/04/python-tips/"/>
    <updated>2014-03-04T16:44:44+08:00</updated>
    <id>http://blog.snowwwolf.com/blog/2014/03/04/python-tips</id>
    <content type="html"><![CDATA[<h2>enumerate</h2>

<p><a href="http://docs.python.org/2/library/functions.html#enumerate">enumerate</a> 用于遍历, 与for in相比, 可同时返回index和element</p>

<pre><code>&gt;&gt;&gt; seasons = ['Spring', 'Summer', 'Fall', 'Winter']
&gt;&gt;&gt; for i, elem in enumerate(seasons):
...   print i, elem
... 
0 Spring
1 Summer
2 Fall
3 Winter
&gt;&gt;&gt; 
</code></pre>

<h2>Counter</h2>

<p><a href="http://docs.python.org/2/library/collections.html#counter-objects">collection.Counter</a> 专用于计数</p>

<pre><code>&gt;&gt;&gt; from collections import Counter
&gt;&gt;&gt; c = Counter('ABBEDDAD')
&gt;&gt;&gt; c.keys()
['A', 'B', 'E', 'D']
&gt;&gt;&gt; c.values()
[2, 2, 1, 3]
&gt;&gt;&gt; c.items()
[('A', 2), ('B', 2), ('E', 1), ('D', 3)]
</code></pre>

<h2>map &amp; reduce</h2>

<p><a href="http://docs.python.org/2.7/library/functions.html#map">map</a> &amp; <a href="http://docs.python.org/2/library/functions.html#reduce">reduce</a> 是Map-Reduce中的map(注意不是C++ STL中的树容器map)和reduce</p>

<p>map用于对每一个元素执行一个一元函数/lambda</p>

<p>reduce用于对初值或当前结果与每一个元素执行一个二元函数/lambda, 得到下一个结果, 再与下一个元素执行这个二元函数/lambda</p>

<p><a href="http://www.cnblogs.com/zhoujinyi/archive/2013/06/07/3121976.html">参考</a>:</p>

<pre><code>&gt;&gt;&gt; map(lambda x:x+x,range(5))   #lambda 函数，各项+本身
[0, 2, 4, 6, 8]
&gt;&gt;&gt; reduce(add,range(11))        #1+2+3+...+10
55
</code></pre>

<h2>Conditional Expression</h2>

<p>Conditional Expression:</p>

<pre><code>x = true_value if condition else false_value
</code></pre>

<p>Python缺少三元 <strong> condition ? true_value : false_value </strong> 运算符, 所以当需要实现这种逻辑的时候, 之前喜欢用 <strong> condition and true_value or false_value </strong> 的方式. 但是这种方式很容易出bug, 比如 condition ? 0 : 1, 就会发现无论condition, 总是返回1. (虽然可以用 <strong> condition ? [0]: [1])[0] </strong> 解决, 但是太丑了)</p>

<p><a href="http://docs.python.org/2.5/whatsnew/pep-308.html">PEP308</a> 建议通过这种Conditional Expression的方式实现</p>
]]></content>
  </entry>
  
</feed>
